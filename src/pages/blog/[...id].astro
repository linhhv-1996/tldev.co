---
import PostHead from '@/components/PostHead.astro'
import PostNavigation from '@/components/PostNavigation.astro'
import { Button } from '@/components/ui/button'
import { Separator } from '@/components/ui/separator'
import Layout from '@/layouts/Layout.astro'
import { getAdjacentPosts, getAllPosts } from '@/lib/data-utils'
import { formatDate, readingTime } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { render } from 'astro:content'

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post) => ({
    params: { id: post.id },
    props: post,
  }))
}

const post = Astro.props
const currentPostId = Astro.params.id
const { Content } = await render(post)
const { next, prev } = await getAdjacentPosts(currentPostId)

const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'BlogPosting',
  headline: post.data.title,
  datePublished: post.data.date,
  dateModified: post.data.date,
  author: {
    '@type': 'Person',
    name: post.data.authors ? post.data.authors[0] : 'Author',
  },
  image: new URL(`/image/${post.id}.png`, Astro.site).toString(),
  keywords: '',
  description: post.data.description || '',
}
const canonicalUrl = new URL(`/blog/${post.id}/`, Astro.site).toString();
---

<Layout canonicalUrl={canonicalUrl}>
  <PostHead slot="head" post={post} />
  
  <script
    type="application/ld+json"
    is:inline
    set:html={JSON.stringify(structuredData)}
  />


  
  
  <section
    class="grid grid-cols-[minmax(0px,1fr)_min(calc(var(--breakpoint-lg)-18rem),100%)_minmax(0px,1fr)] gap-y-6 px-4 md:px-6"
  >


  <!-- Back button -->
    <div class="col-start-2">
      <Button
        id="back-btn"
        variant="outline"
        size="sm"
        className="w-fit -ml-2 rounded-xl cursor-pointer"
        title="Go back"
        aria-label="Go back"
      >
        <Icon name="lucide:arrow-left" class="mr-1.5 size-4" />
          Back
      </Button>
    </div>

    <section class="col-start-2 flex flex-col gap-y-6 text-start">
      <div class="flex flex-col">
        <h1
          class="mb-2 text-3xl leading-tight font-medium text-pretty sm:text-5xl"
        >
          {post.data.title}
        </h1>
      </div>
    </section>

    <!-- -->



    <div class="col-start-2 text-muted-foreground">
  <div
    class="flex flex-wrap items-center gap-x-2 gap-y-1
           text-[11px] sm:text-sm leading-none
           sm:flex-nowrap min-w-0"
  >
    <span class="whitespace-nowrap shrink-0">{formatDate(post.data.date)}</span>

    

    <Separator className="inline sm:hidden opacity-60" orientation="vertical" className="h-4!" />

    <span class="whitespace-nowrap shrink-0">{readingTime(post.body!)}</span>


    <Separator className="inline sm:hidden opacity-60" orientation="vertical" className="h-4!" />

    <span
      class="truncate"
      title={(post.data.authors ?? []).join(' & ')}
    >
      By {(post.data.authors ?? []).join(' & ')}
    </span>
  </div>
</div>
    

    <article class="prose col-start-2 max-w-none" aria-label="Blog post">
      <hr class="my-4 border-neutral-200 dark:border-neutral-200" />
      <Content />
    </article>


    <!-- Support / Donate -->

<div class="col-start-2 mt-0 mb-6 flex">
  <a
    href={`https://buymeacoffee.com/maxslashwang?utm_source=post&utm_medium=button`}
    target="_blank"
    rel="noopener noreferrer"
    aria-label="Keep TL;Dev free & independent"
    title="Keep TL;Dev free & independent"
    class={
      `duration-300 ease-in-out gap-2 whitespace-nowrap text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50 px-4 py-3 has-[>svg]:px-3 rounded-xl group flex items-center justify-start`
    }
  >
    <Icon name="lucide:coffee" class="size-6" />
    <span class="text-sm font-medium">Keep TL;Dev free & independent →<br>
      If this saved you time, toss a small bonus—no paywall, ever.</span>
  </a>
</div>



    <PostNavigation prevPost={prev} nextPost={next} />
  </section>

  <Button
    variant="outline"
    size="icon"
    className="group fixed right-8 bottom-8 z-50 hidden"
    id="scroll-to-top"
    title="Scroll to top"
    aria-label="Scroll to top"
  >
    <Icon
      name="lucide:arrow-up"
      class="mx-auto size-4 transition-all group-hover:-translate-y-0.5"
    />
  </Button>

  
<script is:inline>
  const run = () => {
    // Back button
    const backBtn = document.getElementById('back-btn')
    if (backBtn && !backBtn.dataset.bound) {
      backBtn.dataset.bound = '1'
      backBtn.addEventListener('click', (e) => {
        e.preventDefault()
        // Nếu có referrer cùng origin -> back, không thì về Home
        try {
          const ref = document.referrer
          if (ref && new URL(ref).origin === window.location.origin && window.history.length > 1) {
            history.back()
          } else {
            window.location.href = '/'
          }
        } catch {
          window.location.href = '/'
        }
      })
    }

    // Scroll to top
    const scrollToTopButton = document.getElementById('scroll-to-top')
    const footer = document.querySelector('footer')

    if (scrollToTopButton && !scrollToTopButton.dataset.bound) {
      scrollToTopButton.dataset.bound = '1'
      scrollToTopButton.addEventListener('click', () => {
        window.scrollTo({ top: 0, behavior: 'smooth' })
      })

      const onScroll = () => {
        const footerRect = footer?.getBoundingClientRect?.()
        const isFooterVisible = footerRect ? (footerRect.top <= window.innerHeight) : false
        scrollToTopButton.classList.toggle(
          'hidden',
          window.scrollY <= 300 || isFooterVisible
        )
      }

      window.addEventListener('scroll', onScroll, { passive: true })
      onScroll() // init on load
    }
  }

  // Chạy khi page load lần đầu
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', run, { once: true })
  } else {
    run()
  }
  // Và chạy lại sau mỗi lần chuyển trang nếu có View Transitions
  document.addEventListener('astro:page-load', run)
</script>


</Layout>
